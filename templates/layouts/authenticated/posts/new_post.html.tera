{% extends 'layouts/authenticated.html.tera' %}
{% block title %}Edit Post {{post.id}}{% endblock title %}

{% block authenticated_content %}
{{ super() }}

<div class="flex flex-col">
    <div class="flex flex-row justify-between">
        <h1 class="text-4xl text-5xl lg:text-6xl font-extrabold leading-none mb-4">Create New Post</h1>
    </div>
    <form>
        <div class="flex flex-col">
            <div class="flex flex-col">
                <label for="title" class="text-gray-700 text-base mb-2">Title</label>
                <input id="title" name="title" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="author" class="text-gray-700 text-base mb-2">Author</label>
                <input id="author" name="author" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="status" class="text-gray-700 text-base mb-2">Status</label>
                <input id="status" name="status" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="image_url" class="text-gray-700 text-base mb-2">Image URL</label>
                <input id="image_url" name="image_url" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="category" class="text-gray-700 text-base mb-2">Category</label>
                <input id="category" name="category" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="slug" class="text-gray-700 text-base mb-2">Slug</label>
                <input id="slug" name="slug" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
            <div class="flex flex-col mt-4">
                <label for="content" class="text-gray-700 text-base mb-2">Content</label>
                <textarea id="content" name="content"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm h-64"></textarea>
            </div>
            <div class="flex flex-col mt-4">
                <label for="tags" class="text-gray-700 text-base mb-2">Tags (comma-separated)</label>
                <input id="tags" name="tags" type="text"
                    class="border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm">
            </div>
        </div>
    </form>
    <div class="flex flex-row mt-4">
        <button id="createButton"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Create</button>
        <a href="/blog" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Discard
            Post</a>
        <div id="status-message" class="ml-4"></div>
    </div>
</div>

<script>
    let tags = [];
    let title = document.querySelector('#title').addEventListener('change', (e) => {
        e.preventDefault();
        title = e.target.value;
       
    });
    let author = document.querySelector('#author').addEventListener('change', (e) => {
        e.preventDefault();
        author = e.target.value;
    });
    let content = document.querySelector('#content').addEventListener('change', (e) => {
        e.preventDefault();
        content = e.target.value;
      
    });
    let status = document.querySelector('#status').addEventListener('change', (e) => {
        e.preventDefault();
        status = e.target.value;
    });
    let image_url = document.querySelector('#image_url').addEventListener('change', (e) => {
        e.preventDefault();
        image_url = e.target.value;
    });
    let category = document.querySelector('#category').addEventListener('change', (e) => {
        e.preventDefault();
        category = e.target.value;
    });
    let slug= document.querySelector('#slug').addEventListener('change', (e) => {
        e.preventDefault();
        slug = e.target.value;
    });
    let tagsString = document.querySelector('#tags').addEventListener('change', (e) => {
        e.preventDefault();
        tags = e.target.value.split(',');
    });

    let statusMessageDiv = document.querySelector('#status-message');

    let date = new Date();
    let formattedDate = date.toISOString().replace('T', ' ').substring(0, 19);

    document.querySelector('#createButton').addEventListener('click', function () {

        let post = {
            author: author,
            title: title,
            content: content,
            tags: tags,
            publish_date: formattedDate,
            status: status,
            image_url: image_url,
            category: category,
            created_at: formattedDate,
            updated_at: formattedDate,
            slug: slug
        };

        const jsonPost = JSON.stringify(post);

        console.log(jsonPost);

        fetch("/post/create", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: jsonPost
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                statusMessageDiv.innerHTML = 'Post created successfully!';
                statusMessageDiv.classList.add('text-green-500');
                statusMessageDiv.classList.remove('text-red-500');
            })
            .catch(error => {
                console.error('Error:', error);
                statusMessageDiv.innerHTML = 'Error creating post!';
                statusMessageDiv.classList.add('text-red-500');
                statusMessageDiv.classList.remove('text-green-500');
            }).then(() => {
                setTimeout(() => {
                    window.location.href = '/blog';
                }, 5000);
            });
    });
</script>

{% endblock authenticated_content %}